@page "/"
@using api.Data.LogViewer
@inject LogViewerService LogViewerSvc

<PageTitle>Log Viewer</PageTitle>

<h1>Log Viewer</h1>

<div class="row g-3">
    <h2>Sorting parameters</h2>
    <label>Standalone expression</label>
    <div class="row">
        <div class="col-md-5">
            <input type="text" class="form-control" id="StandaloneSortExpressionProperty"
            @bind="StandaloneSortExpression.Property">
        </div>
        <div class="col-md-1">
            <select class="form-control" value="-1" id="StandaloneSortExpressionOrder"
            @onchange="SetStandaloneSortExpressionOrder">
                <option value="-1">DESC</option>
                <option value="1">ASC</option>
            </select>
        </div>
        <div class="col-md-1">
            <button class="btn btn-success btn-sm"
            @onclick="(() => AddStandaloneSortExpression(StandaloneSortExpression))">➕</button>
            <button class="btn btn-success btn-sm"
            @onclick="(() => GenerateSortQuery(StandaloneSortExpression))">⚙️</button>
        </div>
    </div>
    <label>Composed expression</label>
    <div class="row">
        <div class="col-md-5">
            <select class="form-control" id="ComposedSortExpressionFirstTerm" @bind="ComposedSortExpression.FirstTerm">
                @foreach (var (term, index) in SortExpressions.WithIndex())
                {
                    <option value=@(term)>@(term)</option>
                }
            </select>
        </div>
        <div class="col-md-5">
            <select class="form-control" id="ComposedSortExpressionSecondTerm"
            @bind="ComposedSortExpression.SecondTerm">
                @foreach (var (term, index) in SortExpressions.WithIndex())
                {
                    <option value=@(term)>@(term)</option>
                }
            </select>
        </div>
        <div class="col-md-1">
            <button class="btn btn-success btn-sm"
            @onclick="(() => AddComposedSortExpression(ComposedSortExpression))">➕</button>
            <button class="btn btn-success btn-sm"
            @onclick="(() => GenerateSortQuery(ComposedSortExpression))">⚙️</button>
        </div>
    </div>
    <div class="mb-3">
        <label for="SortQueryPreview" class="form-label">Sort query</label>
        <textarea class="form-control" id="SortQueryPreview" rows="3" @bind="SortQueryPreview"></textarea>
    </div>
    <h2>Filter parameters</h2>
    <label>Standalone expression</label>
    <div class="row">
        <div class="col-md-5">
            <input type="text" class="form-control" id="StandaloneExpressionProperty"
            @bind="StandaloneFilterExpression.Property">
        </div>
        <div class="col-md-1">
            <select class="form-control" value="$eq" id="StandaloneExpressionOperator"
            @onchange="SetStandaloneFilterExpressionOperator">
                <option value="$eq">$eq</option>
                <option value="$gt">$gt</option>
                <option value="$gte">$gte</option>
                <option value="$in">$in</option>
                <option value="$lt">$lt</option>
                <option value="$lte">$lte</option>
                <option value="$ne">$ne</option>
                <option value="$nin">$nin</option>
                <option value="$exists">$exists</option>
                <option value="$regex">$regex</option>
            </select>
        </div>
        <div class="col-md-5">
            <input type="text" class="form-control" id="StandaloneExpressionValue"
            @bind="StandaloneFilterExpression.Value">
        </div>
        <div class="col-md-1">
            <button class="btn btn-success btn-sm"
            @onclick="(() => AddStandaloneFilterExpression(StandaloneFilterExpression))">➕</button>
            <button class="btn btn-success btn-sm"
            @onclick="(() => GenerateFilter(StandaloneFilterExpression))">⚙️</button>
        </div>
    </div>
    <label>Composed expression</label>
    <div class="row">
        <div class="col-md-5">
            <select class="form-control" id="Sort" @bind="ComposedFilterExpression.FirstTerm">
                @foreach (var (term, index) in FilterExpressions.WithIndex())
                {
                    <option value=@(term)>@(term)</option>
                }
            </select>
        </div>
        <div class="col-md-1">
            <select class="form-control" value="$and" id="ComposedExpressionOperator"
            @onchange="SetComposedFilterExpressionOperator">
                <option value="$and">$and</option>
                <option value="$nor">$nor</option>
                <option value="$or">$or</option>
            </select>
        </div>
        <div class="col-md-5">
            <select class="form-control" id="ComposedExpressionSecondTerm" @bind="ComposedFilterExpression.SecondTerm">
                @foreach (var (term, index) in FilterExpressions.WithIndex())
                {
                    <option value=@(term)>@(term)</option>
                }
            </select>
        </div>
        <div class="col-md-1">
            <button class="btn btn-success btn-sm"
            @onclick="(() => AddComposedFilterExpression(ComposedFilterExpression))">➕</button>
            <button class="btn btn-success btn-sm"
            @onclick="(() => GenerateFilter(ComposedFilterExpression))">⚙️</button>
        </div>
    </div>
    <div class="mb-3">
        <label for="FilterQueryPreview" class="form-label">Filter query</label>
        <textarea class="form-control" id="FilterQueryPreview" rows="3" @bind="FilterQueryPreview"></textarea>
    </div>
    <div class="col-md-2">
        <button type="submit" class="btn btn-primary" @onclick="HandleSearch">Search</button>
    </div>
</div>

@if (logs == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h2>Data</h2>
    <nav>
        <ul class="pagination justify-content-start">
            <li class="page-item">
                <a class="page-link" @onclick="FetchPreviousPage">Previous</a>
            </li>
            <li class="page-item">
                <a class="page-link" @onclick="FetchNextPage">Next</a>
            </li>
        </ul>
    </nav>
    <select class="form-control" @onchange="SetPageSize" style="width: auto;">
        <option value="5">5</option>
        <option value="10">10</option>
        <option value="25">25</option>
        <option value="50">50</option>
        <option value="100">100</option>
    </select>
    <table class="table table-hover">
        <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Data</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var log in logs)
            {
                <tr>
                    <td>@log.Id</td>
                    <td>@log.Data</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private AuditLogModel[]? logs;

    private StandaloneSortExpression StandaloneSortExpression = new();
    private ComposedSortExpression ComposedSortExpression = new();
    private List<string> SortExpressions = new();
    private string SortQueryPreview = string.Empty;

    private StandaloneFilterExpression StandaloneFilterExpression = new();
    private ComposedFilterExpression ComposedFilterExpression = new();
    private List<string> FilterExpressions = new();
    private string FilterQueryPreview = string.Empty;

    private int CurrentPage = 1;
    private int PageSize = 5;

    protected override async Task OnInitializedAsync()
    {
        StandaloneFilterExpression.Operator = "$eq";
        StandaloneSortExpression.Order = "-1";

        logs = await LogViewerSvc.GetLogsAsync(default, default, CurrentPage, PageSize);
    }

    private async Task HandleSearch()
    {
        logs = await LogViewerSvc.GetLogsAsync(FilterQueryPreview, SortQueryPreview, CurrentPage, PageSize);
    }

    private void AddStandaloneFilterExpression(StandaloneFilterExpression exp)
    {
        FilterExpressions.Add(exp.AsQuery());

        if (FilterExpressions.Count == 1)
        {
            FilterQueryPreview = $"{FilterExpressions[0]}";
            InitializeComposedFilterOptions();
        }
    }

    private void AddComposedFilterExpression(ComposedFilterExpression exp)
    {
        FilterExpressions.Add(exp.AsQuery());
    }

    private void AddComposedSortExpression(ComposedSortExpression exp)
    {
        SortExpressions.Add(exp.AsPreQuery());
    }

    private void AddStandaloneSortExpression(StandaloneSortExpression exp)
    {
        SortExpressions.Add(exp.AsPreQuery());

        if (SortExpressions.Count == 1)
        {
            SortQueryPreview = $"{exp.AsQuery()}";
            InitializeComposedSortOptions();
        }
    }

    private void InitializeComposedFilterOptions()
    {
        ComposedFilterExpression.FirstTerm = StandaloneFilterExpression.AsQuery();
        ComposedFilterExpression.Operator = "$and";
        ComposedFilterExpression.SecondTerm = StandaloneFilterExpression.AsQuery();
    }

    private void InitializeComposedSortOptions()
    {
        ComposedSortExpression.FirstTerm = StandaloneSortExpression.AsPreQuery();
        ComposedSortExpression.SecondTerm = StandaloneSortExpression.AsPreQuery();
    }

    private void SetStandaloneFilterExpressionOperator(ChangeEventArgs e)
    {
        StandaloneFilterExpression.Operator = e.Value?.ToString();
    }

    private void SetStandaloneSortExpressionOrder(ChangeEventArgs e)
    {
        StandaloneSortExpression.Order = e.Value?.ToString();
    }

    private void SetComposedFilterExpressionOperator(ChangeEventArgs e)
    {
        ComposedFilterExpression.Operator = e.Value?.ToString();
    }

    private void GenerateFilter(ComposedFilterExpression exp)
    {
        FilterQueryPreview = exp.AsQuery();
    }

    private void GenerateFilter(StandaloneFilterExpression exp)
    {
        FilterQueryPreview = exp.AsQuery();
    }

    private void GenerateSortQuery(ComposedSortExpression exp)
    {
        SortQueryPreview = exp.AsQuery();
    }

    private void GenerateSortQuery(StandaloneSortExpression exp)
    {
        SortQueryPreview = exp.AsQuery();
    }

    private async Task FetchPreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage -= 1;
            await HandleSearch();
        }
    }

    private async Task FetchNextPage()
    {
        CurrentPage += 1;
        await HandleSearch();
    }

    private async Task SetPageSize(ChangeEventArgs e)
    {
        PageSize = int.Parse(e.Value?.ToString());
        await HandleSearch();
    }
}
